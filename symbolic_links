#!/bin/bash


# Title:
# Description:
#
#


################################################################################################################################
#Print a usage message
# Arguments:
#   None
# Outputs:
#   Write a help message
# Condition checking:
#   - Requiring the user to run the script with sudo, to avoid having 'sudo inside the script.
#   - Using $EUID (the effective user ID) to check that. If a user runs a script with sudo, the effective UID will be that of the root user (0), even though the actual UID (the value of $UID) is that of the user who invoked the command.
#   - -ne: This stands for "not equal.
##############################################################################################################################

usage() {
  if [[ $EUID -ne 0 ]]; then
    echo -e "\nError, the script must be run with elevated privileges"
    echo -e "\nPlease run the script as 'sudo $0'"
    exit 1
  fi
}
usage

################################################################################################################################
# log additional message for verbose mode
# locals:
#   MESSAGE
# Arguments:
#   message to log
# Outputs:
#   log message passed as an argument
# Explanation:
#   - local: This keyword restricts the variable's scope to the function itself.
#   - ${@}: This special variable represents all the arguments passed to the function. By using MESSAGE="${@}", the function captures all input arguments as a single string.
#   - echo -e: The -e option enables interpretation of backslash escapes. This allows the use of escape sequences like \n to createnew lines in the output.
#   - "\n$MESSAGE\n": This string prints a newline before and after the MESSAGE content. The result is that when log is called, itwill print the message on its own line with blank lines above and below it.
###################################################################################################################################

log() {
local MESSAGE="${@}"
echo -e "\n$MESSAGE\n"

}

###############################################################################################################################
# Function to log a successful command
###############################################################################################################################

success() {
  if [[ $? = 0 ]]; then
    log "${1}"
  fi
}

# Function to create symbolic links after looping through the files in a directory
#
USR_PATH="/home/$SUDO_USER"

sym_loop() {
  local files_names="${1}"
  local TARGET_DIR="${2}"
  local DEST_DIR="$USR_PATH/$TARGET_DIR"
  local FINAL_TARGET_DIR="$USR_PATH/.starter_files/$TARGET_DIR"

 # Linking each files individually if it does not already exist in the target directory
  if [[ ! -f $"$USR_PATH/$TARGET_DIR/$files_names" ]]; then
      ln -s "$file" $"$USR_PATH/$TARGET_DIR/$file_names"

      success "Successfully created a symbolic link as follows $file -> $USR_PATH/$TARGET_DIR/$filename"
  else
      log "$filename already exist in "$USR_PATH/$TARGET_DIR", consider renaming or moving it before creating a symbolic link"
  fi
}

# Function to loop through a directory

dir_loop(){
  local directory="${1}"
  for file in "$directory"/*; do
    if [[ -d $file ]]; then
      for sub_file in "$file"/*; do
        sub_filename=$(basename "$sub_file")


        sym_loop $sub_filename
      done
    fi
    if [[ -f $file ]]; then
      file_path=$(basename "$file")
      sym_loop $file_path
    fi
  done
}

      




##################################################################################################################################
# 1. Defining a function to create the symbolic links

USR_PATH="/home/$SUDO_USER"

symlink_creator() {

  local TARGET_DIR="${1}"
  local DEST_DIR="$USR_PATH/$TARGET_DIR"
  local FINAL_TARGET_DIR="$USR_PATH/.starter_files/$TARGET_DIR"
  
  # Creating a directory if it does not already exists
  mkdir -p $DEST_DIR


  # Looping through each file in the directory before to not overwrite already existing files with the same name.

  #for file in "$FINAL_TARGET_DIR"/*; do
    # Getting the filename without the directory path
    #filename=$(basename "$file")
    
    # Linking each files individually if it does not already exist in the target directory
    #if [[ ! -f $"$USR_PATH/$TARGET_DIR/$filename" ]]; then
      #ln -s "$file" $"$USR_PATH/$TARGET_DIR/$filename"

      #success "Successfully created a symbolic link as follows $file -> $USR_PATH/$TARGET_DIR/$filename"
    #else
      #log "$filename already exist in "$USR_PATH/$TARGET_DIR", consider renaming or moving it before creating a symbolic link"
    #fi
  #done
}


   

    # Checking whether the destination file exists
  #if [[ -e "$DEST_PATH" ]]; then
    #log "The $DEST_PATH file already exist."
  #else
   # ln -s "$SOURCE_PATH" "$DEST_PATH"
    #log "Successfully created a symbolic link as follows"


# 2. Creating symbolic links
###################################################################################################################################
# $SUDO_USER allows us to access the username of the original user who requested the elevated permissions.
# Because we are running the script with sudo, using an environmental variable such as $HOME or $USER will change the value of the e user to 'root'.
# However, we want the user to be the actual user logged in and running the command.
##################################################################################################################################
#USR_PATH="/home/$SUDO_USER"


# a. Pointing to the .bashrc file

symlink_creator bin
symlink_creator .config

###################################################################################################################################

###################################################################################################################################

