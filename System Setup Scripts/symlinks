#!/bin/bash

#################################################################################################################################
# Title: Symbolic Link Creation Script for Configuration and Initialization Files
# Description:
#   This script manages the creation of symbolic links for configuration and initialization files for a specified user.
#   It includes options to:
#     - Check if the script is run with elevated privileges (sudo).
#     - Create symbolic links for directories such as "bin" and "config" from the `.starter_files` directory to the user's home directory.
#     - Provide the user with options for handling an existing `.bashrc` file in their home directory.
#   - Users can choose to:
#     - Overwrite an existing `.bashrc`
#     - Back up the existing `.bashrc` and then create a symbolic link
#     - Leave the existing `.bashrc` unchanged.
#
# Options:
#   - None
#   - Requires that the script be run with `sudo` privileges.
##################################################################################################################################

##################################################################################################################################
# Function: log
# Arguments:
#   message - the message to log
# Outputs:
#   - Logs messages to the console, formatted with line breaks.
# Explanation:
#   - `local MESSAGE="${@}"` captures all input arguments into a single string variable, `MESSAGE`.
#   - `echo -e` enables interpretation of escape characters, allowing the message to print with newlines.
##################################################################################################################################

log() {
  local MESSAGE="${@}"
  echo -e "\n$MESSAGE\n"
}

################################################################################################################################
#Function - usage
# Arguments:
#   None
# Outputs:
#   Write a usage message
# Condition checking:
#   - Requiring the user to run the script with sudo, to avoid having 'sudo inside the script.
#   - Using $EUID (the effective user ID) to check that. If a user runs a script with sudo, the effective UID will be that of the root user (0), even though the actual UID (the value of $UID) is that of the user who invoked the command.
#   - -ne: This stands for "not equal.
##############################################################################################################################

usage() {
  if [[ $EUID -ne 0 ]]; then
    log "Error, the script must be run with elevated privileges"
    log "Please run the script as 'sudo $0'"
    exit 1
  fi
}

#Calling the function 
usage 

##################################################################################################################################
# Function: success
# Arguments:
#   message - the message to log upon successful completion
# Outputs:
#   - Logs the success message if the last command was successful (exit status 0).
# Explanation:
#   - Checks the exit code of the last executed command (`$?`).
#   - If the exit code is 0, indicating success, logs the message passed as an argument.
##################################################################################################################################

success() {
  if [[ $? = 0 ]]; then
    log "${1}"
  fi
}

# USR_PATH will contain the full path to the home directory of the user who ran the script with sudo.
USR_PATH="/home/$SUDO_USER"

# Function to create symbolic links after looping through the files in a directory

##################################################################################################################################
# Function: sym_loop
# Arguments:
#   file_name - name of the file for which a symbolic link is to be created.
#   TARGET_DIR - destination directory within the user’s home directory.
# Outputs:
#   - Creates a symbolic link for each specified file and assigns appropriate permissions.
# Explanation:
#   - `mkdir -p "$DEST_DIR"` creates the destination directory if it doesn’t exist.
#   - Checks if a symbolic link for the specified file does not already exist.
#   - If no existing link is found, it creates one from the `.starter_files` directory and assigns ownership to `$SUDO_USER`.
##################################################################################################################################

sym_loop() {
  # Assign the first argument passed to the function as 'file_name'
  local file_name="${1}"

   # Assign the second argument passed to the function as 'TARGET_DIR'
  local TARGET_DIR="${2}"

  # Construct the full destination path for the symbolic link (target directory)
  local DEST_DIR="$USR_PATH/$TARGET_DIR"

   # Construct the path where the original files are stored, inside the .starter_files directory
  local FINAL_TARGET_DIR="$USR_PATH/.starter_files/$TARGET_DIR"

  # Create the target directory if it doesn't exist
  mkdir -p "$DEST_DIR"

  #  Check if a symbolic link with the specified file name already exists in the destination directory

  if [[ ! -L "$DEST_DIR/$file_name" ]]; then
    ln -s "$FINAL_TARGET_DIR/$file_name" "$DEST_DIR/$file_name"
     # Set ownership of the symbolic link to the original user, not root
    chown -R "$SUDO_USER":"$SUDO_USER" "$DEST_DIR/$file_name"

    success "Successfully created a symbolic link: $FINAL_TARGET_DIR/$file_name -> $DEST_DIR/$file_name"
  else

     # If the symbolic link already exists, log a message advising the user to handle the existing file
    log "$file_name already exists in $DEST_DIR, consider renaming or moving it before creating a symbolic link"
  fi
}

# Function to loop through a directory and process files

##################################################################################################################################
# Function: dir_loop
# Arguments:
#   directory - path of the target directory within `.starter_files`.
# Outputs:
#   - Iterates through files and subdirectories to create symbolic links.
# Explanation:
#   - `for file in "$directory"/*;` iterates over all items in the target directory.
#   - For directories, it loops through nested files and calls `sym_loop` to create links for each.
#   - For individual files, it directly calls `sym_loop` to handle the link creation.
##################################################################################################################################

dir_loop() {

   # Assign the first argument passed to the function as 'directory'
  local directory="${1}"

  # Loop through each item in the specified directory
  for file in "$directory"/*; do

     # Log the current directory being processed
    log "Processing directory: $directory"

    # Check if the item is a directory
    if [[ -d $file ]]; then

       # If it's a directory, loop through each item within this subdirectory
      for sub_file in "$file"/*; do

        # Get the path of the subdirectory relative to the parent directory
        # 'basename':  allows to isolate filenames or folder names without the need for the full path
        # Source: https://ioflood.com/blog/bash-basename/
        local parent_dir="$(basename "$directory")/$(basename "$file")"

        # Extract the base name of the sub-file to use it in symbolic linking
        sub_filename=$(basename "$sub_file")

        # Call the sym_loop function to create a symbolic link for each file in the subdirectory
        sym_loop "$sub_filename" ".$parent_dir"
      done
    fi
    
     # If the item is a regular file (not a directory), process it directly
    if [[ -f $file ]]; then

      # Extract the base name of the file
      file_path=$(basename "$file")

       # Call sym_loop to create a symbolic link for this file in the specified directory
      sym_loop "$file_path" "$(basename "$directory")"
    fi
  done
}

# Function to create symbolic links for the specified target directory

##################################################################################################################################
# Function: symlink_creator
# Arguments:
#   TARGET_DIR - target subdirectory within `.starter_files`.
# Outputs:
#   - Creates symbolic links for files in the specified subdirectory of `.starter_files`.
# Explanation:
#   - `dir_loop "$FINAL_TARGET_DIR"` initiates the link creation process by calling `dir_loop` on the target directory.
##################################################################################################################################

symlink_creator() {

  # Define TARGET_DIR based on the argument passed to the function
  local TARGET_DIR="$1"

   # Set FINAL_TARGET_DIR to the specified target directory within the .starter_files directory
  # $USR_PATH is the user's home directory, and .starter_files is a subdirectory containing files to link
  local FINAL_TARGET_DIR="$USR_PATH/.starter_files/$TARGET_DIR"

  # Loop through the directory and create symbolic links
  # # Call the dir_loop function, passing FINAL_TARGET_DIR as an argument.
  # This will loop through the contents of FINAL_TARGET_DIR, creating symbolic links for each item
  dir_loop "$FINAL_TARGET_DIR"
}

# Call symlink_creator function for the 'bin' and 'config' directories.
# These calls will create symbolic links for all files in these directories.

symlink_creator "bin"
symlink_creator "config"

# Symbolic link to the ~/.bashrc file


# Check if ~/.bashrc exists
if [ -e "$USR_PATH/.bashrc" ]; then

  # If the file exists, prompt the user for action
  log "The file ~/.bashrc already exists."
  log "What would you like to do?"
  echo "1) Overwrite the existing file"
  echo "2) Back up the current file (move it to old-bashrc)"
  echo "3) Leave the current .bashrc as is"
  log "Please enter just the number corresponding to your choice, ie: either '1' or '2', NOT '1)' or '2)'."

  # Read the user's response into a variable
  read -p "Enter your choice (1/2/3): " response

  # Perform actions based on the user's response
  case $response in
    1)
      # Option 1: Overwrite the existing file
      ln -sf "$USR_PATH/.starter_files/home/bashrc" "$USR_PATH/.bashrc"
      chown -R "$SUDO_USER":"$SUDO_USER" "$USR_PATH/.bashrc"
      # The -s option forces the creation of the link, used to overwrite the file.
      log "The file ~/.bashrc has been overwritten and the symbolic link was created."
      ;;

    2)
      # Option 2: Backup the current file and then create the symbolic link
      mv "$USR_PATH/.bashrc" "$USR_PATH/.bashrc.old"
      ln -s "$USR_PATH/.starter_files/home/bashrc" "$USR_PATH/.bashrc"
      chown -R "$SUDO_USER":"$SUDO_USER" "$USR_PATH/.bashrc"
      log "The current .bashrc has been backed up to ~/.bashrc.old and the symbolic link has been created."
      ;;

    3)
      # Option 3: Leave the current .bashrc unchanged
      log "No changes made. The current .bashrc is unchanged and no link created."
      ;;

    *)
      # If the user enters an invalid response
      log "Invalid choice. No changes were made."
      ;;

  esac

else
  # If the file doesn't exist, create the symbolic link directly
  ln -s "$USR_PATH/.starter_files/home/bashrc" "$USR_PATH/.bashrc"
  chown -R "$SUDO_USER":"$SUDO_USER" "$USR_PATH/.bashrc"
  log "The symbolic link for .bashrc has been created."
fi



