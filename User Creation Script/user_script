#!/bin/bash

# Title: New User Creation Script
# Description: This script allows a user to:
#   - Creati a new user
#   - Specify a shell 
#   - Add the user to one or multiple groups
#   - Copy the contents of /etc/skel to the user's home directory
#   - Set a password
#
#options
#   -u -> username
#   -s -> shell
#   -g additional groups
##################################################################################################################################

##################################################################################################################################
# Function: log 
# locals:
#   MESSAGE
# Arguments:
#   message to log
# Outputs:
#   log message passed as an argument
# Explanation:
#   - local: This keyword restricts the variable's scope to the function itself.
#   - ${@}: This special variable represents all the arguments passed to the function. By using MESSAGE="${@}", the function captures all input arguments as a single string.
#   - echo -e: The -e option enables interpretation of backslash escapes. This allows the use of escape sequences like \n to createnew lines in the output.
#   - "\n$MESSAGE\n": This string prints a newline before and after the MESSAGE content. The result is that when log is called, it will print the message on its own line with blank lines above and below it.
###################################################################################################################################

log() {
local MESSAGE="${@}"
echo -e "\n$MESSAGE\n"

}

###################################################################################################################################
#Function: usage 
# Arguments:
#   None
# Outputs:
#   Write a help message if script is run without root privileges ('sudo').
# Condition checking:
#   - Requiring the user to run the script with sudo, to avoid having 'sudo' inside the script.
#   - Using $EUID (the effective user ID) to check that. If a user runs a script with sudo, the effective UID will be that of the root user (0), even though the actual UID (the value of $UID) is that of the user who invoked the command.
#   - -ne: This stands for "not equal.
##############################################################################################################################

usage() {
  if [[ $EUID -ne 0 ]]; then
    echo -e "\nError, the script must be run with elevated privileges"
    echo -e "\nPlease run the script as 'sudo $0'"
    echo -e "\n*************Instructions for running the script ***********.\n"
    echo "-> Run the script with the -u option to simply create a user with a default shell."
    echo "-> Run the script with the -u & -s options to create a user with the specified shell."
    echo -e "-> Run the script with the -u, -s & -g options to create a user with the specified shell and add them to the specified groups. List each group separated by commas only, no space.\n"
    exit 1
  fi
}
usage

##################################################################################################################################
# Function: support 
# Arguments:
#   None
# Output:
#   Print a usage & troubleshooting guide.
###################################################################################################################################

support() {
  log "****** Usage guide ******"
  echo " -u: to specify the user name"
  echo " -s: to specify the shell name"
  echo " -g: to specify the groups the user should be added to"
  log " *************Instructions for running the script ***********."
  echo "-> Run the script with the -u option to simply create a user with a default shell."
  echo "-> Run the script with the -u & -s options to create a user with the specified shell."
  echo "-> Run the script with the -u, -s & -g options to create a user with the specified shell and add them to the specified groups."
  log "***** General Troubleshooting Guide ******* "
  echo "1. Ensure the capitalization is correct."
  echo "2. If the user needs to be added to more than 2 groups, enter the groups names separated by commas with no space in between."
  echo "3. look for uncessarry whitespace."
  echo "4. Enter just the shell name. eg: 'bash', 'zsh' etc., NOT the path to the shell ( i.e NOT /bin/bash)." 
}

#################################################################################################################################
# Function: success
# Arguments:
#   Message to log
# Output:
#   Print a message only if the previously run command was sueccessful.
# Explanation:
#   - Checks the exit code of the previously run command ($?).
#   - If the exit code returns '0', the last command was successful and the message passed as an argument is printed out.
###############################################################################################################################

success() {
  if [[ $? = 0 ]]; then
    log "${1}"
  fi
}

##################################################################################################################################
# Function: failure
# Arguments:
#   None
# Output:
#   Return 'support', defined previously, which will print the usage/troubleshooting guide.
# Explanation:
#   - Checks the exit code of the previously run command ($?).
#   - If the exit code does not return '0', the last run command is a failure and the usage guide will be printed to help the user run the script appropriately.
#################################################################################################################################

failure() {
  if [[ $? -ne 0 ]]; then
    support
  fi
}

################################################################################################################################
# Function: shell_support
# Arguments:
#   None
# Output:
#   - Logs a message instructing the user to enter a valid shell name.
#   - Logs and displays the list of valid shells on the system.
#   - Provides a final message to clarify how to enter shell names without the full path.
# Explanation:
#   - Uses command substitution to retrieve the list of valid shells from the `/etc/shells` file and stores it in the variable `shell_list`.
#   - Logs an error message informing the user to enter a valid shell name if an invalid shell was entered.
#   - Logs and prints out all valid shells, making it clear what options are available.
#   - Calls the 'success' funciton and logs a final message explaining that only the shell name (e.g., `bash`, `sh`) should be entered,
#     not the full path (e.g., `/usr/bin/bash`).
#################################################################################################################################

shell_support() {
  shell_list=$(cat /etc/shells)
  log "Invalid shell entered, please enter a valid shell."
  log "Valid shells include:"
  echo $shell_list
  success "Only enter the name of the shell, NOT the path to the shell. eg 'bash', 'sh' and NOT '/usr/bin/bash'."
}

#################################################################################################################################
# Function: user_exist
# Arguments:
#   usr - the username to check for existence on the system, passed as the first argument.
# Output:
#   - Returns 0 if the username exists.
#   - Returns 1 if the username does not exist.
# Explanation:
#   - Uses the `grep` command to search for the specified username in the `/etc/passwd` file.
#   - The `-q` option makes `grep` run in "quiet" mode, so it doesn't print any output.
#   - The regex used here ("^$usr:") is designed to match a line that begins with a specific username or string stored in the $usr variable, followed by a colon (:).
#   - If the username exists (i.e., `grep` finds a match), it returns 0, indicating success.
#   - If no match is found, it returns 1, indicating that the username does not exist on the system.
#   - Source: https://computing.stat.berkeley.edu/tutorial-using-bash/regex.html
##################################################################################################################################

user_exist(){
  local usr="${1}"
  if grep -q "^$usr:" /etc/passwd; then
    return 0   # the user name entered already exists

  else
    return 1 # The user name does not exist
  fi
}

################################################################################################################################
# Function: shell_exist
# Arguments:
#   shl - the shell name to check for validit, passed as the first argument.
# Output:
#   - Returns 0 if the shell name is valid.
#   - Returns 1 if the shell name is invalid.
# Explanation:
#   - Uses `grep` to search for a shell entry matching the specified name in `/etc/shells`.
#   - Searches for a line that starts with `/bin/` followed by the shell name, with nothing after the shell name, which ensures that only full shell names are matched.
#   - If the shell is valid, returns 0; otherwise, it returns 1, indicating an invalid shell.
##################################################################################################################################

shell_exist() {
  local shl="${1}"

  if grep -q "^/bin/$shl$" /etc/shells; then
    return 0  #shell name entered is valid
  else
    return 1
  fi     #shell name entered is not valid
}

##############################################################################################################################
# Function: group_exist
# Arguments:
#   grp - the group name to check for existence on the system, passed as the first argument.
# Output:
#   - Returns 0 if the group exists.
#   - Returns 1 if the group does not exist.
# Explanation:
#   - Uses the `grep` command to search for the specified group name in `/etc/group`.
#   - The `-q` option makes `grep` run in "quiet" mode to avoid outputting results.
#   - Searches for the group name followed by a colon (`:`) at the start of the line to match exact group names.
#   - Returns 0 if the group exists, and 1 if it does not exist on the system.
################################################################################################################################

group_exist() {
  local grp="${1}"

  if grep -q "^$grp:" /etc/group; then
    return 0 # group exists
  else
    return 1 # group does not exists
  fi
}

#################################################################################################################################
# Function: cp_skel
# Arguments:
#   usr - the username to which the contents of `/etc/skel` will be copied, passed as the first argument.
# Output:
#   - Copies default files from `/etc/skel` to the user's home directory.
#   - Changes ownership of the copied files to the specified user.
#   - Logs a success message indicating the copy operation was successful.
# Explanation:
#   - Copies all files and directories in `/etc/skel` to `/home/<username>`. (with 'username' being the name specified by the user).
#   - Sets ownership of the copied files to the specified user for correct permissions.
#   - Calls the `success` function to log a message if the copy operation completes successfully.
#################################################################################################################################

cp_skel() {
  local usr="${1}"

  cp -r /etc/skel/. /home/$usr
  chown -R "$usr":"$usr" "/home/$usr"
  # The -R option is used to apply the changes to the entire /home/$usr directory as well as files and subdirectories in it.
  # Source: https://linuxize.com/post/linux-chown-command/
  success "Contents of /etc/skel successfully copied to $usr's home directory."
  if [[ $? -ne 0 ]]; then
    log "Error: Failed to copy skel files"
    exit 1
  fi
}

#################################################################################################################################
# Function: password
# Arguments:
#   usr - the username for whom the password is to be set, passed as the first argument.
# Output:
#   - Sets a password for the specified user.
#   - Logs a success message indicating the password was set successfully.
# Explanation:
#   - Calls the `passwd` command to prompt for and set a password for the specified user.
#   - Once the password is set, the `success` function is called to log a confirmation message.
#################################################################################################################################

password() {
  local usr="${1}"
  passwd $usr
  success "Password for user $usr successfully set."
}

#################################################################################################################################
# Function: get_next_uid
# Arguments:
#   None
# Output:
#   - Prints the next available UID (User ID) starting from 1000.
# Explanation:
#   - Sets `first_uid` to 1000, the starting point for regular user UIDs on many LINUX distros.
#   - Uses a `while` loop to check if the current `first_uid` exists in `/etc/passwd`:
#     - The `grep` command searches for the UID pattern in `/etc/passwd` to check for existence.
#     - If the UID is found (i.e., `grep` returns true), `first_uid` is incremented by 1 using command substitution, and the loop continues.
#     - The loop exits when `grep` does not find `first_uid` in `/etc/passwd`, meaning it is available.
#   - The function then echoes the next available UID for use.
################################################################################################################################


get_next_uid() {
  local first_uid=1000
  while grep -q ":x:$first_uid:" /etc/passwd; do
    first_uid=$(( $first_uid + 1 ))
  done
  echo $first_uid
}

#################################################################################################################################
# Function: get_next_gid
# Arguments:
#   None
# Output:
#   - Prints the next available GID (Group ID) starting from 1000.
# Explanation:
#   - Sets `first_gid` to 1000, the starting point for regular group GIDs on most LINUX distros.
#   - Uses a `while` loop to check if the current `first_gid` or GID exists in `/etc/group`:
#     - The `grep` command searches for the GID pattern in `/etc/group` to check for existence.
#     - If the GID is found (i.e., `grep` returns true), `first_gid` is incremented by 1, and the loop continues.
#     - The loop exits when `grep` does not find `first_gid` in `/etc/group`, meaning it is available.
#   - The function then echoes the next available GID for use.
#################################################################################################################################

get_next_gid() {
  local first_gid=1000
  while grep -q ":x:$first_gid:" /etc/group; do
    first_gid=$(( $first_gid + 1 ))
  done

echo $first_gid
}

################################################################################################################################
# Function: group_append
# Arguments:
#   grps - a comma-separated list (array) of group names to which the user should be added, passed as the first arguments
# Output:
#   - Loops through the array to checks if each specified group exists.
#   - If the group exists, adds the user to the group if they are not already a member.
#   - Logs messages indicating whether the user was added successfully or if they were already a member.
# Explanation:
#   - The function accepts a comma-separated list of group names and processes each one to add the user.
#   - Sets `IFS` (Internal Field Separator) to a comma, enabling the split of `grps` into an array of group names.
#   - Loops through each group name to check if the group exists using the `group_exist` function:
#     - If the group does not exist, logs an error message and exits with a status of 1.
#   - For each existing group, checks if the user is already a member:
#     - Extracts the current group members from `/etc/group` using `grep` and `cut`.
#     - Uses `grep` with a word boundary pattern to check if the user is among the members.
#   - If the user is not a member of the group:
#     - Adds them to the group:
#       - If the group has no existing members, appends the username without a comma.
#       - If the group has existing members, appends the username after a comma for correct formatting.
#     - Calls the success function and log message indicating the user was successfully added to the group.
#   - If the user is already a member, logs a message stating they are already part of the group.
#   - Line: members=$(grep "^$group:" /etc/group | cut -d: -f4)
#        -> $(): Uses command line substitution to define the value of $members.
#        -> grep "^$group:" /etc/group:
#             * grep is used to search for patterns in text.
#             * ^$group: is a regular expression pattern:
#             * ^ asserts the start of the line.
#             * $group represents the group name stored in the variable group.
#             * : looks for a literal colon following the group name, as /etc/group entries are colon-separated.
#             * /etc/group is the file where grep searches for the pattern.
#         -> | : Pipe: he pipe (|) takes the output of the previous command (grep "^$group:" /etc/group) and passes it as input to the next command (cut -d: -f4).
#         -> cut -d: -f4 
#             * cut is a command-line utility for extracting specific fields from text.
#             * -d: specifies the delimiter as a colon (:), meaning cut will split the input line based on colons.
#             * -f4 tells cut to select the 4th field after splitting, which corresponds to the members field in /etc/group entries.
#             * In /etc/group, the fourth field lists all users in the group, separated by commas if there are multiple members.
#   - Line: sed -i "/^$group:/s/$/$user/" /etc/group
#       -> sed -i: 
#           * sed: command-line text editor used to perform find-and-replace operations on strings. 
#           * -i : "in-place option":  which directly edits the /etc/group file without creating a temporary copy. The file is modified and saved with the changes. Without the -i option, the command would still perform the search and subsitution on the /etc/group file but would outputs the modified content to the terminal without modifying the file.
#       ->  "/^$group:/s/$/$user/":
#           * /^$group:/:
#               - / is used to delimit the pattern.
#               - ^ is an anchor that asserts the start of the line.
#               - $group is a variable representing the group name (provided elsewhere in the script)
#               - : is a literal colon, ensuring we’re looking at a group entry (since /etc/group entries are colon-separated).
#               Overall, ^$group: matches the start of any line that contains $group: as the group name in /etc/group.
#           * s/$/$user/:
#               - s is the substitute command in sed, which replaces text.
#               - $ represents the end of the line (after all existing content).
#               - $user is the username to be added.
#               Effect: s/$/$user/ appends the value of $user to the end of the matched line (after any existing members of the group).
#           * /etc/group:
#               * The file being modified.
##############################################################################################################################

group_append() {
  local grps="${1}"
  # The 'groups' variable contains comma separated names of groups.
    # We have to check if each of these groups the user entered exist, since we cannot add a user to a group that has not been created.
    # For that we have to turn the 'groups' variable in a array and loop through very single group to check its existence.
    #
    # Set IFS to comma to handle comma-separated group names as an array
    IFS=","

    #The -a option tells read to store the split values in an array called 'group_array'.
    # Source: https://www.baeldung.com/linux/ifs-shell-variable
    read -a group_array <<< "$grps"
    for group in "${group_array[@]}"; do

      # Check if the group exists using group_exist function
      if ! group_exist "$group"; then
        log "Error: group '$group' does not exits, please enter a valid group."
        exit 1
      fi
        
      # Get the current members by extracting the fourth field (the list of members) in the line containing the scpecified group in the /etc/group file, and assigning that list to the members variable.
      #
      # Sources: https://phoenixnap.com/kb/linux-cut & https://www.baeldung.com/linux/pipe-output-to-function
      members=$(grep "^$group:" /etc/group | cut -d: -f4)
  
      # Check if the user is already a member of the group
      # \b$user\b ensures that grep matches user as a whole word, not as part of another word. For example, \buser\b would match user but not username.
      # <<< : s a here-string operator, which passes the content of the 'members' variable to grep as input.
      # Condition returns 'true' if $user is found in $members, and a non-zero status (false) if $user is not found
      #
      # Source: https://tldp.org/LDP/abs/html/x17837.html
      # Source: https://labex.io/tutorials/shell-bash-regex-matching-391551
      if ! grep -q "\b$user\b" <<< "$members"; then
        
        # Check if the group already has members
        if [[ -z "$members" ]]; then

          # Add the user without comma if there is no members
          sed -i "/^$group:/s/$/$user/" /etc/group
          success "User $user successfully added to group $group."
        else

          # Add a comma before adding the user to maintain consistent formatting.
          sed -i "/^$group:/s/$/,$user/" /etc/group
          success "User $user successfully added to group $group."
        fi

      else
        log "User $user is already a member of group $group."
      fi
    done
}



#USR_PATH="/home/$SUDO_USER"

while getopts ":u:s:g:" OPT; do
  case $OPT in
    u)
      user="${OPTARG}"  #set the username
      ;;

    s)
      shell="${OPTARG}"  #sets the shell name
      ;;

    g)
      groups="${OPTARG}" # set groups (comma-separated list)
      ;;

    :)
      log "Error: -${OPTARG} requires an argument"
      support
      exit 1
      ;;

    "?")
      log "Error: Wrong option passed."
      support
      exit 1
      ;;
  esac
done

# Variables

uid=$(get_next_uid)  # calls the get_next_uid function and stores the output in a variable using command subsitution.
gid=$(get_next_gid) # calls the get_next_gid function and stores the output in a variable using command subsitution.
home_dir="/home/$user" # sets the path to the user's home directory and stores it in a variable.

#################################################################################################################################
# Function: create_user
# Arguments:
#   shl: The shell to assign to the newly created user (e.g., bash, sh).
# Output:
#   - No direct output, but modifies system files and creates a home directory.
# Explanation:
#   - Takes one argument: the shell to be assigned to the user.
#   - Appends a new user entry to the `/etc/passwd` file in the following format:
#     "$user:x:$uid:$gid::$home_dir:/usr/bin/$shl"
#     - `$user`: the username for the new user.
#     - `$uid`: the unique user ID.
#     - `$gid`: the group ID to assign to the user.
#     - `$home_dir`: the home directory for the user.
#     - `/usr/bin/$shl`: the full path to the user's shell (e.g., `/usr/bin/bash`).
#   - Appends a new entry to the `/etc/group` file to create a group for the user with the format:
#     "$user:x:$gid:"
#     - `$user`: the username for the new user (also used as the group name).
#     - `$gid`: the group ID.
#   - Creates the user's home directory using `mkdir -p $home_dir`:
#     - `mkdir -p` ensures the directory is created if it doesn't already exist, including any parent directories.
#   - Changes the ownership of the home directory to the newly created user and group using `chown $uid:$gid "$home_dir"`.
#     - `$uid` and `$gid` are the user ID and group ID that were assigned to the user earlier.
#     - `$home_dir` is the path to the user's home directory.
#   - Sets the permissions for the home directory using `chmod 755 "$home_dir"`:
#     - `chmod 755` gives the user full read, write, and execute permissions on the directory, while allowing others to read and execute but not write.
#################################################################################################################################

create_user() {
  local shl="${1}"
  echo "$user:x:$uid:$gid::$home_dir:/usr/bin/$shl" >> /etc/passwd
  echo "$user:x:$gid:" >> /etc/group
  mkdir -p $home_dir
  chown $uid:$gid "$home_dir"
  chmod 755 "$home_dir"
}


#1. Ensuring the username is provided. -z option is used to check if the variable $user is empty.
if [[ -z $user ]]; then
  log "Error: a username is required. Please run the script with at least the -u option. "
  support
  exit 1
fi

#2. Check if the provided user does not exists yet

# Calls the user_exist function and negates the output.
if ! user_exist "$user"; then

  # Checks if the groups variable is not empty

  # a. Creating a user with a home directory,  specified shell and groups if provided
  
  # the -n option checks if the '$shell' & '$groups' variables are not empty.
  if [[ -n "$shell" && -n "$groups" ]]; then
    # Returns 'true' if the exit code of the 'shell_exist' function is 0.
    if shell_exist "$shell"; then

      # Calls the create_user, group_append, success, cp_skel & failure functions.
      create_user "$shell"
      group_append "$groups"
      success "User $user created with shell '$shell' and added to group(s) $groups."
      cp_skel "$user"
      failure

    else
      shell_support
    fi


  elif [[ -n "$shell" ]]; then

    # Calls the create_user, success, cp_skel & failure functions.
    if shell_exist "$shell"; then
      create_user "$shell" 
      success "User $user created with shell '$shell'."
      cp_skel "$user"
      failure
    else
      shell_support
    fi


  elif [[ -n "$groups" ]]; then

    # Calls the create_user with 'bash' as the argument, group_append, success, cp_skel & failure functions.
    create_user bash
    group_append "$groups"
    success "User $user created with the default shell 'bash' and added to groups $groups."
    cp_skel "$user"
    failure

  else
    # Calls the create_user, success, cp_skel & failure functions.
    create_user bash
    success "User $user created with the default shell 'bash'."
    cp_skel "$user"
    failure

  fi
 
  # Setting up a password for the user
  # Calls the password function with the variable '$user' passed as an argument.
  password "$user"  


else    # username entered already exists.
  log " User $user already exists, please choose another username."
  exit 1
fi

# End of the script
